import{_ as e,c as a,o,a7 as l}from"./chunks/framework.LSeiR9Kd.js";const g=JSON.parse('{"title":"Polylabel","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),i={name:"index.md"},t=l('<h1 id="polylabel" tabindex="-1">Polylabel <a class="header-anchor" href="#polylabel" aria-label="Permalink to &quot;Polylabel&quot;">​</a></h1><img src="https://user-images.githubusercontent.com/32143268/214836992-7ff8b5d6-1a15-4655-a13d-bb12c04b4ce1.png" alt="Gujarat"><p>This package implements an algorithm to find the <em>pole of inaccessibility</em> of a polygon, the most distant internal point from the polygon outline. This algorithm was originally written (and taken from) <a href="https://github.com/mapbox/polylabel" target="_blank" rel="noreferrer">mapbox/polylabel</a> - you can find a lot more information there! To summarize, the algorithm is basically a quad-tree search across the polygon which finds the point which is most distant from any edge.</p><p>In the plot above, this point is shown in orange, while the input polygon (multipolygon in this case) is shown in blue.</p><p>The package is built on top of <code>GeoInterface.jl</code> and <code>GeometryOps.jl</code>, and works with any polygon or multipolygon object which implements the GeoInterface <code>geointerface_geomtype</code> API for reverse conversion.</p><p>The main entry point is the <code>polylabel(input [; atol = nothing, rtol = 0.01])</code> function. It returns a 2-Tuple of floats, representing the x and y coordinates of the found pole of inaccessibility.</p><ul><li><a href="#Polylabel.Cell"><code>Polylabel.Cell</code></a></li><li><a href="#Polylabel.polylabel-Tuple{Any}"><code>Polylabel.polylabel</code></a></li></ul><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Polylabel.Cell" href="#Polylabel.Cell">#</a> <b><u>Polylabel.Cell</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, half_size, polygon)</span></span></code></pre></div><p>Comparison operators operate on the <code>max_distance</code> field.</p><p><a href="https://github.com/asinghvi17/Polylabel.jl/blob/cc0bdc8362c5416f50745d09a5b52d4b63f8fc1f/src/Polylabel.jl#L20-L24" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Polylabel.polylabel-Tuple{Any}" href="#Polylabel.polylabel-Tuple{Any}">#</a> <b><u>Polylabel.polylabel</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polylabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon; rtol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, atol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Float64, Float64}</span></span></code></pre></div><p><code>polylabel</code> finds the pole of inaccessibility (most distant internal point from the border) of the given polygon or multipolygon, and returns its coordinates as a 2-Tuple of <code>(x, y)</code>.</p><p>Any geometry which implements the <a href="https://github.com/JuliaGeo/GeoInterface.jl" target="_blank" rel="noreferrer"><code>GeoInterface.jl</code></a> polygon or multipolygon traits can be passed to this method.</p><p>This algorithm was originally written (and taken from) <a href="https://github.com/mapbox/polylabel" target="_blank" rel="noreferrer">mapbox/polylabel</a> - you can find a lot more information there! To summarize, the algorithm is basically a quad-tree search across the polygon, which finds the point which is most distant from any edge.</p><p>The algorithm is iterative, and the <code>tol</code> keywords control the convergence criteria.</p><p><code>rtol</code> is relative distance between two candidate points, <code>atol</code> is absolute distance (in the same vein as <code>Base.isapprox</code>). When <code>atol</code> is provided, it overrides <code>rtol</code>. Once a candidate points satisfies the convergence criteria, it is returned.</p><p><a href="https://github.com/asinghvi17/Polylabel.jl/blob/cc0bdc8362c5416f50745d09a5b52d4b63f8fc1f/src/Polylabel.jl#L90-L107" target="_blank" rel="noreferrer">source</a></p></div><br>',11),s=[t];function n(r,p,d,h,c,b){return o(),a("div",null,s)}const m=e(i,[["render",n]]);export{g as __pageData,m as default};
