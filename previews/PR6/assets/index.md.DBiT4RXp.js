import{_ as s,c as a,o as i,a7 as e}from"./chunks/framework.LSeiR9Kd.js";const t="/Polylabel.jl/previews/PR6/assets/fvinpcu.Dvbg_rCZ.png",l="/Polylabel.jl/previews/PR6/assets/xamippj.BydnNOis.png",n="/Polylabel.jl/previews/PR6/assets/yquxwbl.B8c95qtH.png",p="/Polylabel.jl/previews/PR6/assets/mmccfjd.C42g67f7.png",m=JSON.parse('{"title":"Polylabel","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),h={name:"index.md"},o=e(`<h1 id="polylabel" tabindex="-1">Polylabel <a class="header-anchor" href="#polylabel" aria-label="Permalink to &quot;Polylabel&quot;">​</a></h1><img src="https://user-images.githubusercontent.com/32143268/214836992-7ff8b5d6-1a15-4655-a13d-bb12c04b4ce1.png" alt="Gujarat"><p><code>Polylabel.jl</code> finds the <em>pole of inaccessibility</em> of a polygon, the most distant internal point from the polygon outline. This is useful for visual techniques like labelling polygons.</p><p>The main entry point is <code>Polylabel.polylabel(polygon; atol, rtol)</code> which processes any <a href="https://github.com/JuliaGeo/GeoInterface.jl" target="_blank" rel="noreferrer">GeoInterface-compatible</a> polygon (from GeometryBasics.jl, ArchGDAL.jl, LibGEOS.jl, Shapefile.jl, etc.) and returns a point as a 2-tuple of <code>(x, y)</code>. It uses <a href="https://github.com/JuliaGeo/GeometryOps.jl" target="_blank" rel="noreferrer">GeometryOps.jl</a> to compute distances.</p><p>This algorithm was originally written (and taken from) <a href="https://github.com/mapbox/polylabel" target="_blank" rel="noreferrer">mapbox/polylabel</a> - you can find a lot more information there! To summarize, the algorithm is basically a quad-tree search across the polygon which finds the point which is most distant from any edge. There are alternative Julia implementations that are essentially the same algorithm in <a href="https://github.com/DanielVandH/DelaunayTriangulation.jl" target="_blank" rel="noreferrer">DelaunayTriangulation.jl</a></p><h2 id="tutorial" tabindex="-1">Tutorial <a class="header-anchor" href="#tutorial" aria-label="Permalink to &quot;Tutorial&quot;">​</a></h2><p>Polylabel is mostly used to find the optimal point to place a label for a polygon.</p><p>Let&#39;s label the states of the Netherlands! First, we&#39;ll get the data using <a href="https://github.com/JuliaGeo/GADM.jl" target="_blank" rel="noreferrer">GADM.jl</a> (but you can load any dataset or even just a custom vector of geometries).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GADM, DataFrames</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fra_states </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GADM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FRA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame</span></span></code></pre></div><p>Now, let&#39;s plot them using <a href="https://github.com/MakieOrg/Makie.jl" target="_blank" rel="noreferrer">Makie.jl</a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie, GeoInterfaceMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f, a, p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> poly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fra_states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geom;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fra_states, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    axis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; aspect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DataAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+t+`" alt=""></p><p>Now, we get the polylabel points. Note that this is the only point in this entire tutorial, in which we&#39;ve used the package!</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Polylabel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label_points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> polylabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(fra_states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geom)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>13-element Vector{Tuple{Float64, Float64}}:</span></span>
<span class="line"><span> (4.609312265740437, 45.27603623375587)</span></span>
<span class="line"><span> (4.399733693283226, 47.14209052905285)</span></span>
<span class="line"><span> (-3.2311704373591574, 48.277860622140665)</span></span>
<span class="line"><span> (1.6292935682617864, 47.39589805073056)</span></span>
<span class="line"><span> (9.109488690701287, 42.24161942968179)</span></span>
<span class="line"><span> (4.810991063687439, 48.89094670243756)</span></span>
<span class="line"><span> (2.6722452357071242, 49.919972509550846)</span></span>
<span class="line"><span> (2.710264533648551, 48.62878850119535)</span></span>
<span class="line"><span> (0.8581305739200004, 49.29945222296688)</span></span>
<span class="line"><span> (0.4018724950254621, 45.56928741724809)</span></span>
<span class="line"><span> (1.8283359174514129, 43.65198697933018)</span></span>
<span class="line"><span> (-0.4062326557888818, 47.7859534460392)</span></span>
<span class="line"><span> (6.337364444089905, 43.96619612654306)</span></span></code></pre></div><p>Let&#39;s also show this on the plot:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scatter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, label_points; color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span></span></code></pre></div><p><img src="`+l+`" alt=""></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">labelplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a, label_points;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fra_states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAME_1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    align </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fontsize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span></span></code></pre></div><p><img src="`+n+`" alt=""></p><p>Just for context, let&#39;s also plot the centroids:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> centroid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">centroids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(fra_states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geom)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scatter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, centroids; color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span></span></code></pre></div><p><img src="`+p+'" alt=""></p><p>Note that here, in Corsica, if we placed the label at the centroid then it would have spilled out of the polygon. These situations are where Polylabel comes in handy!</p><p>It&#39;s always ideal to compute the polylabel in the projection you are targeting, since the shape of the polygon changes depending on the projection you use as well as the aspect ratio of your axis.</p><p>This isn&#39;t restricted to geospatial data in any way - labeling samples segmented from a microscope image is also very possible!</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Polylabel.polylabel" href="#Polylabel.polylabel">#</a> <b><u>Polylabel.polylabel</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polylabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon; rtol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, atol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Float64, Float64}</span></span></code></pre></div><p><code>polylabel</code> finds the pole of inaccessibility (most distant internal point from the border) of the given polygon or multipolygon, and returns its coordinates as a 2-Tuple of <code>(x, y)</code>.</p><p>Any geometry which implements the <a href="https://github.com/JuliaGeo/GeoInterface.jl" target="_blank" rel="noreferrer"><code>GeoInterface.jl</code></a> polygon or multipolygon traits can be passed to this method.</p><p>This algorithm was originally written (and taken from) <a href="https://github.com/mapbox/polylabel" target="_blank" rel="noreferrer">mapbox/polylabel</a> - you can find a lot more information there! To summarize, the algorithm is basically a quad-tree search across the polygon, which finds the point which is most distant from any edge.</p><p>The algorithm is iterative, and the <code>tol</code> keywords control the convergence criteria.</p><p><code>rtol</code> is relative distance between two candidate points, <code>atol</code> is absolute distance (in the same vein as <code>Base.isapprox</code>). When <code>atol</code> is provided, it overrides <code>rtol</code>. Once a candidate points satisfies the convergence criteria, it is returned.</p><p><a href="https://github.com/asinghvi17/Polylabel.jl/blob/ffe7dcdcdad53e1618809247e067a5926311b3cf/src/Polylabel.jl#L96-L113" target="_blank" rel="noreferrer">source</a></p></div><br>',28),r=[o];function k(d,c,g,E,y,u){return i(),a("div",null,r)}const f=s(h,[["render",k]]);export{m as __pageData,f as default};
